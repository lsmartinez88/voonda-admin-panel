name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    test:
        name: Test and Lint
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [16.x, 18.x, 20.x]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Build project
              run: npm run build
              env:
                  VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
                  VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-files-${{ matrix.node-version }}
                  path: dist/

    deploy:
        name: Deploy to Production
        needs: test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Use Node.js 18.x
              uses: actions/setup-node@v4
              with:
                  node-version: 18.x
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build project
              run: npm run build
              env:
                  VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
                  VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
                  VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}

            # Descomenta y configura según tu proveedor de hosting
            - name: Deploy to Vercel
              uses: amondnet/vercel-action@v25
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
                  vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
                  vercel-args: "--prod"
                  working-directory: ./

        # - name: Deploy to Netlify
        #   uses: nwtgck/actions-netlify@v2.0
        #   with:
        #     publish-dir: './dist'
        #     production-branch: main
        #     github-token: ${{ secrets.GITHUB_TOKEN }}
        #     deploy-message: "Deploy from GitHub Actions"
        #   env:
        #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v2
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"
